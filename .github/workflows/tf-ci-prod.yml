name: Terraform workflow

# tags =/= releases! But releases will create tags and we don't want duplicate triggering.
# on: 
#   push: 
#     branches:
#       - main
#     tags:
#     - 'release*'

# Not using 'published'. For now, publish with "pre-release". On deploy success, then manually publish release.
on:
  release:
    types: [created, edited]

jobs:
  prod-deploy:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.7

      - name: Format
        id: fmt
        run: terraform -chdir=deploy fmt -check
        continue-on-error: true

      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TFUSER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TFUSER_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Init
        id: init
        run: terraform -chdir=deploy init

      - name: Validate
        id: validate
        run: terraform -chdir=deploy validate -no-color

      # full github.sha string is too long for our needs
      - name: Compute short sha for docker image tag
        id: tagger
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Image & Push
        env:
          # not relying on step outputs in this case; supplying full uri directly
          # ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # ECR_REPOSITORY: repo-name
          IMAGE_TAG: ${{ steps.tagger.outputs.sha_short }}
          REPO_URI: ${{ secrets.ECR_REPO }}
        run: |
          docker build --compress -t $REPO_URI:$IMAGE_TAG .
          docker push $REPO_URI:$IMAGE_TAG
          docker tag $REPO_URI:$IMAGE_TAG $REPO_URI:latest
          docker push $REPO_URI:latest

      - name: Terraform Plan
        # At this time terraform-setup does not let you use ENV vars!!
        run: |
          cat > pipeline.auto.tfvars <<EOF
          db_username = "${{ secrets.TF_VAR_db_username }}"
          db_password = "${{ secrets.TF_VAR_db_password }}"
          EOF
          terraform -chdir=deploy workspace select prod || terraform -chdir=deploy workspace new prod 
          terraform -chdir=deploy plan

      - name: Terraform Apply
        run: |
          cat > pipeline.auto.tfvars <<EOF
          db_username = "${{ secrets.TF_VAR_db_username }}"
          db_password = "${{ secrets.TF_VAR_db_password }}"
          EOF
          terraform -chdir=deploy workspace select prod || terraform -chdir=deploy workspace new prod 
          terraform -chdir=deploy apply -auto-approve

